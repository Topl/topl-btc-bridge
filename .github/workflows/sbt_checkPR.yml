name: Check and Deploy
on:
  push:
    branches: ['*']
    tags: ["*"]
  release:
    types: [published]

jobs:
  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Setup Scala
        uses: olafurpg/setup-scala@v13
        with:
          java-version: adopt@1.11
      - name: Run unit tests
        run: sbt toplBtcBridge/test
      - uses: actions/upload-artifact@v3
        with:
          name: unit-test-reports
          path: topl-btc-bridge/target/test-reports/
  publish-for-it:
    name: Publish Docker Images for IT
    runs-on: ubuntu-20.04
    needs: unit-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Setup Scala
        uses: olafurpg/setup-scala@v13
      - name: Log in to the Github Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push images to registries
        run: sbt "toplBtcBridge / Docker / publish"
        env:
          DOCKER_PUBLISH: true
  integration-test:
    name: Run Integration Tests
    runs-on: ubuntu-20.04
    needs: publish-for-it
    services:
      # Label used to access the service container
      bifrost:
        # Docker Hub image
        image: docker.io/toplprotocol/bifrost-node:2.0.0-alpha10
        #
        ports:
           - 9084:9084
      bitcoin:
        # Docker Hub image
        image: docker.io/1maa/bitcoin:v25-regtest
        #
        ports:
          - 18444:18444  
        options: --name bitcoin
      topl-btc-bridge:
        # Docker Hub image
        image: ghcr.io/topl/topl-btc-bridge:latest
        #
        ports:
          - 3000:3000
        options: --name topl_bridge
        volumes:
          - ${{ github.workspace }}/data:/data
        env:
          TOPL_HOST: "bifrost"
          TOPL_WALLET_DB: "/data/topl-wallet.db"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Setup Scala
        uses: olafurpg/setup-scala@v13
        with:
          java-version: adopt@1.11
      - name: Prepare wallet
        run: |
          curl -fL "https://github.com/coursier/launchers/raw/master/cs-x86_64-pc-linux.gz" | gzip -d > cs
          chmod +x cs
          ./cs setup --yes
          shopt -s expand_aliases
          alias brambl-cli="./cs launch -r https://s01.oss.sonatype.org/content/repositories/releases co.topl:brambl-cli_2.13:2.0.0-beta1 -- "
          export TOPL_WALLET_DB=topl-btc-bridge/src/universal/topl-wallet.db
          export TOPL_WALLET_JSON=topl-btc-bridge/src/universal/topl-wallet.json
          export TOPL_WALLET_PASSWORD=password
          export ADDRESS=$(brambl-cli wallet current-address --walletdb $TOPL_WALLET_DB)
          brambl-cli simple-transaction create --from-fellowship nofellowship --from-template genesis --from-interaction 1 --change-fellowship nofellowship --change-template genesis --change-interaction 1  -t $ADDRESS -w $TOPL_WALLET_PASSWORD -o genesisTx.pbuf -n private -a 1000 -h  127.0.0.1 --port 9084 --keyfile $TOPL_WALLET_JSON --walletdb $TOPL_WALLET_DB --fee 10 --transfer-token lvl
          brambl-cli tx prove -i genesisTx.pbuf --walletdb $TOPL_WALLET_DB --keyfile $TOPL_WALLET_JSON -w $TOPL_WALLET_PASSWORD -o genesisTxProved.pbuf
          export GROUP_UTXO=$(brambl-cli tx broadcast -i genesisTxProved.pbuf -h 127.0.0.1 --port 9084)
          echo "GROUP_UTXO: $GROUP_UTXO"
          until brambl-cli genus-query utxo-by-address --host localhost --port 9084 --secure false --walletdb $TOPL_WALLET_DB; do sleep 5; done
          echo "label: ToplBTCGroup" > groupPolicy.yaml
          echo "registrationUtxo: $GROUP_UTXO#0" >> groupPolicy.yaml
          brambl-cli simple-minting create --from-fellowship self --from-template default  -h 127.0.0.1 --port 9084 -n private --keyfile $TOPL_WALLET_JSON -w $TOPL_WALLET_PASSWORD -o groupMintingtx.pbuf -i groupPolicy.yaml  --mint-amount 1 --fee 10 --walletdb $TOPL_WALLET_DB --mint-token group
          brambl-cli tx prove -i groupMintingtx.pbuf --walletdb $TOPL_WALLET_DB --keyfile $TOPL_WALLET_JSON -w $TOPL_WALLET_PASSWORD -o groupMintingtxProved.pbuf
          export SERIES_UTXO=$(brambl-cli tx broadcast -i groupMintingtxProved.pbuf -h 127.0.0.1 --port 9084)
          echo "SERIES_UTXO: $SERIES_UTXO"
          until brambl-cli genus-query utxo-by-address --host localhost --port 9084 --secure false --walletdb $TOPL_WALLET_DB; do sleep 5; done
          echo "label: ToplBTCSeries" > seriesPolicy.yaml
          echo "registrationUtxo: $SERIES_UTXO#0" >> seriesPolicy.yaml
          echo "fungibility: group-and-series" >> seriesPolicy.yaml
          echo "quantityDescriptor: liquid" >> seriesPolicy.yaml
          brambl-cli simple-minting create --from-fellowship self --from-template default  -h localhost --port 9084 -n private --keyfile $TOPL_WALLET_JSON -w $TOPL_WALLET_PASSWORD -o seriesMintingTx.pbuf -i seriesPolicy.yaml  --mint-amount 1 --fee 10 --walletdb $TOPL_WALLET_DB --mint-token series
          brambl-cli tx prove -i seriesMintingTx.pbuf --walletdb $TOPL_WALLET_DB --keyfile $TOPL_WALLET_JSON -w $TOPL_WALLET_PASSWORD -o seriesMintingTxProved.pbuf
          export ASSET_UTXO=$(brambl-cli tx broadcast -i seriesMintingTxProved.pbuf -h 127.0.0.1 --port 9084)
          echo "ASSET_UTXO: $ASSET_UTXO"
          until brambl-cli genus-query utxo-by-address --host localhost --port 9084 --secure false --walletdb $TOPL_WALLET_DB; do sleep 5; done
          sudo chown 1001:1001 topl-btc-bridge/src/universal/topl-wallet.db
          sudo chmod 777 topl-btc-bridge/src/universal/topl-wallet.db
          mkdir ${{ github.workspace }}/data
          cp topl-btc-bridge/src/universal/topl-wallet.db ${{ github.workspace }}/data/topl-wallet.db
      - name: Restart Topl Bridge
        uses: docker://docker
        with:
          args: docker restart topl_bridge
      - name: Run integration tests
        run: sbt "integration / test"
      - uses: actions/download-artifact@v3
        with:
          path: topl-btc-bridge/target/test-reports/
          name: unit-test-reports
      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: success()
        with:
          files: |
            integration/target/test-reports/**/*.xml
            integration/target/it-reports/**/*.xml
  publish:
    name: Publish Docker Images
    runs-on: ubuntu-20.04
    needs: integration-test
    steps:
      - if: github.event.release
        name: Checkout code
        uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - if: github.event.release
        name: Setup Scala
        uses: olafurpg/setup-scala@v13
      - if: github.event.release
        name: Log in to the Github Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - if: github.event.release
        name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - if: github.event.release
        name: Push images to registries
        run: sbt "toplBtcBridge / Docker / publish"
        env:
          DOCKER_PUBLISH: true
          RELEASE_PUBLISH: true
      - if: github.event.release
        uses: olafurpg/setup-gpg@v3
      - if: github.event.release
        name: Deploy (release only)
        run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}